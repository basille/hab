% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/trajdyn.r
\name{trajdyn}
\alias{trajdyn}
\title{Interactive Display of Objects of Class \code{ltraj}}
\usage{
trajdyn(x, burst = attr(x[[1]], "burst"), na.rm = TRUE, hscale = 1,
  vscale = 1, addvec = 1, by = 1, only = Inf, recycle = TRUE,
  ppar = list(pch = 16), lpar = list(lwd = 2), nvar = NULL,
  display = c("guess", "windows", "tk"), ...)
}
\arguments{
\item{na.rm}{Logical, whether to remove missing locations.}

\item{addvec}{Numeric, whether to hihglight the current location (1,
default), the current step (2) or nothing (0).}

\item{by}{The number of previous points/steps to increment at each
step. Default is an increment of 1 point/step.}

\item{only}{The number of previous points/steps to
display. Default is \code{Inf}, i.e. all points/steps.}

\item{ppar}{A list of arguments that allows the user to modify point
display, using any argument available to \code{points}. Default is
\code{list(pch = 16)}. See Details.}

\item{lpar}{A list of arguments that allows the user to modify line
display, using any argument available to \code{lines}. Default is
\code{list(lwd = 2)}. See Details.}

\item{nvar}{A character string giving the name of a variable.}
}
\value{
If a \code{nvar} is provided, return the original ltraj
with updated values in \code{infolocs(nvar)}.
}
\description{
Modified version of \code{\link[adehabitatLT]{trajdyn}}, which
allows to 1) increment by \code{by} points/steps, 2) only display
\code{k} previous points/steps, 3) show the current step as a
vector, 4) to modify point and line display, 5) show the current
burst/loc/(infolocs) and 6) to update interactively a new or
existing variable in \code{infolocs}.
}
\details{
\code{y} selects the number of previous points/steps to increment
at each step. It defaults to \code{1}, i.e. an increment of 1
point/step. Choosing anything different than a positive number
sets it back to \code{1}.

\code{k} selects the number of previous points/steps to
display. It defaults to \code{Inf}, i.e. all
points/steps. Choosing anything different than a positive number
sets it back to \code{Inf}.

\code{v} shows (or removes) the current step as a vector. Note
that the vector connects the current location to the next
available location (even if there are NAs in the data set).

\code{s} shows the current buffer and localisation numbers,
together with the associated infolocs (if it exists). If a
\code{nvar} is requested, only this variable is shown.

The argument \code{nvar} allows to work on a given variable: if a
variable of that name already exists in \code{infolocs(x)}, the
values of the variable are retrieved from there; otherwise, a
variable filled with NAs is used. If a \code{nvar} is requested,
\code{d} "deletes" the value and resets it to \code{NA}; every
other letter not in use in any option is saved in \code{nvar}. The
letters available are: "c", "e", "f", "h", "j", "m", "t", "u",
"w", "x".

On a QWERTY keyboard:

we t u
  f hj
 xcm

On a AZERTY keyboard:

e t u
  f hj m
wxc

It is possible to use point and line parameters globally for every
trajectory displayed. In this case, \code{ppar} and \code{lpar} need
just be a list of graphical parameters, such as \code{list(pch = 21,
col = "black", bg = "white")}. It is also possible to use parameters
for single steps, using as graphical parameter a list of vectors of
length equal to each trajectory. Such information can be based on
\code{infolocs}, see Example.
}
\examples{
\dontrun{
data(puechcirc)
##'
## Use of `by` and `only` to select the previous k points/steps:
trajdyn(puechcirc, by = 10, only = 20)
##'
## Use of `ppar` and `lpar` globally:
trajdyn(puechcirc, ppar = list(col = "red"), lpar = list(col = "blue"))
##'
## Create some random `infolocs`:
info <- list(data.frame(col = sample(c("red", "grey"),
         80, rep = TRUE), stringsAsFactors = FALSE),
     data.frame(col = sample(c("blue", "darkred"),
         69, rep = TRUE), stringsAsFactors = FALSE),
     data.frame(col = sample(c("darkgreen", "purple"),
         66, rep = TRUE), stringsAsFactors = FALSE))
## Watch the row names:
info <- mapply(function(x, y) {
    row.names(x) <- row.names(y)
    return(x)
}, info, puechcirc, SIMPLIFY = FALSE)
infolocs(puechcirc) <- info
##'
## Use the infolocs to color points and steps:
trajdyn(puechcirc, by = 1, only = 20, ppar = list(pch = 19,
    col = infolocs(puechcirc, "col", simplify = TRUE)),
    lpar = list(col = infolocs(puechcirc, "col", simplify = TRUE)))
##'
## The same without removing the missing locations:
trajdyn(puechcirc, by = 1, only = 20, ppar = list(pch = 19,
    col = infolocs(puechcirc, "col", simplify = TRUE)),
    lpar = list(col = infolocs(puechcirc, "col", simplify = TRUE)),
    na.rm = FALSE)
##'
## Use of `nvar` to dynamically fill in new data:
(newtraj <- trajdyn(puechcirc, nvar = "Var"))
}
}
\author{
Modified by Mathieu Basille
\email{basille@ase-research.org}
}

